diff --git a/source/vietj/vertx/http/HttpOutput.ceylon b/source/vietj/vertx/http/HttpOutput.ceylon
index 8e957c6..5d39027 100644
--- a/source/vietj/vertx/http/HttpOutput.ceylon
+++ b/source/vietj/vertx/http/HttpOutput.ceylon
@@ -17,7 +17,7 @@
 by "Julien Viet"
 license "ASL2"
 doc "Provides access for writing the headers and  content of an [[HttpClientRequest]] or an [[HttpServerResponse]]."
-shared abstract class HttpOutput<O>() given O satisfies HttpOutput<O> {
+shared abstract class HttpOutput<O, Body = String>(BodyType<Body> bodyType) given O satisfies HttpOutput<O, Body> {
 	
 	doc "Set the response headers."
 	shared formal O headers(<String-><String|{String+}>>* headers);
diff --git a/source/vietj/vertx/http/HttpServerRequest.ceylon b/source/vietj/vertx/http/HttpServerRequest.ceylon
index fc3e3a5..00796ab 100644
--- a/source/vietj/vertx/http/HttpServerRequest.ceylon
+++ b/source/vietj/vertx/http/HttpServerRequest.ceylon
@@ -29,7 +29,7 @@ shared class HttpServerRequest(HttpServerRequest_ delegate, Map<String, {String+
 	
 	doc "The response. Each instance of this class has an [[HttpServerResponse]] instance attached to it.
 	     This is used to send the response back to the client."
-	shared HttpServerResponse response = HttpServerResponse(delegate.response());
+	shared HttpServerResponse response<Body>(BodyType<Body> bodyType = textBody) => HttpServerResponse(delegate.response());
 	
 	doc "The request method"
 	shared String method => delegate.method();
diff --git a/source/vietj/vertx/http/HttpServerResponse.ceylon b/source/vietj/vertx/http/HttpServerResponse.ceylon
index d44053e..d647552 100644
--- a/source/vietj/vertx/http/HttpServerResponse.ceylon
+++ b/source/vietj/vertx/http/HttpServerResponse.ceylon
@@ -24,20 +24,21 @@ doc "Represents a server-side HTTP response. Instances of this class are created
      for a body to be written out to the response.
      
      Instances of this class are not thread-safe."
-shared class HttpServerResponse(HttpServerResponse_ delegate) extends HttpOutput<HttpServerResponse>() {
+shared class HttpServerResponse<Body = String>(HttpServerResponse_ delegate, BodyType<Body> bodyType)
+	extends HttpOutput<HttpServerResponse<Body>, Body>(bodyType) {
 
 	doc "Set the status code."
-	shared HttpServerResponse status(doc "the status code value" Integer code) {
+	shared HttpServerResponse<Body> status(doc "the status code value" Integer code) {
 		delegate.setStatusCode(code);
 		return this;
   	}
   	
-	shared actual HttpServerResponse header(String headerName, String headerValue) {
+	shared actual HttpServerResponse<Body> header(String headerName, String headerValue) {
 		delegate.putHeader(headerName, headerValue);
 		return this;
 	}
 
-	shared actual HttpServerResponse end(String? chunk) {
+	shared actual HttpServerResponse<Body> end(String? chunk) {
 		if (exists chunk) {
 			delegate.end(chunk);
 		} else {
@@ -46,7 +47,7 @@ shared class HttpServerResponse(HttpServerResponse_ delegate) extends HttpOutput
 		return this;
 	}
 
-	shared actual HttpServerResponse headers(<String-><String|{String+}>>* headers) {
+	shared actual HttpServerResponse<Body> headers(<String-><String|{String+}>>* headers) {
 		for (header_ in headers) {
 			value item = header_.item;
 			switch (item)
